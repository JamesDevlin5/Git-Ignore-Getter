#!/usr/bin/env bash

# Where to place the downloaded gitignore file
IGNORE_OUTPUT_FILE="$(realpath -m "${1:-"$PWD/.gitignore"}")"
PRETTY_IGNORE_OUTPUT_FILE="$(realpath -m --relative-to="$PWD" "$IGNORE_OUTPUT_FILE")"

# Where to place the cached list of template types
CACHED_FILE="${XDG_CACHE_HOME}/gitignore.templates"

# Styling
escape_color() {
	printf "\033[%dm" "$1"
}

RED_FG="$(escape_color 31)"
GREEN_FG="$(escape_color 32)"
PURPLE_FG="$(escape_color 35)"
RESET_COLOR="$(escape_color 0)"
BOLD="$(escape_color 1)"

print_err() {
	printf "%s%s%s\n" "$RED_FG" "$1" "$RESET_COLOR"
}

print_msg() {
	printf "%s > %s%s%s    %s%s%s\n" "$GREEN_FG" "$BOLD" "$1" "$RESET_COLOR" "$PURPLE_FG" "$2" "$RESET_COLOR"
}

# Ensure we're not going to overwrite an existing one;
# Make the user deal with this.
if [[ -e $IGNORE_OUTPUT_FILE ]]; then
	print_err "Git-ignore output file already exists! Exiting..."
	exit 1
fi

# Cache list of gitignore templates
if [[ ! -f $CACHED_FILE ]]; then
	curl -sL 'https://gitignore.io/api/list' | tr ',' '\n' > "$CACHED_FILE"
fi

# Interactive select
SELECTED="$(fzf --multi --cycle --no-preview < "$CACHED_FILE")"

# Check if nothing was selected (fzf was likely aborted if so)
if [[ -z $SELECTED ]]; then
	print_err "Did not select any gitignore templates! Exiting..."
	exit 1
fi

# Format list of templates appropriately for api
API_TARGET="$(paste -s -d, <<< "${SELECTED[@]}")"
PRETTY_API_TARGET="${API_TARGET//,/,  }"

# Download the file from the api
curl -sLo "$IGNORE_OUTPUT_FILE" 'https://gitignore.io/api/'"$API_TARGET"

# Print success
print_msg "Downloaded git-ignore templates:" "$PRETTY_API_TARGET"
print_msg "To file:                        " "$PRETTY_IGNORE_OUTPUT_FILE"
